/* Only run if ResizeObserver is supported. */
if ('ResizeObserver' in self) {
  /* Create a single ResizeObserver instance to handle all container elements. */
  var ro = new ResizeObserver(function(entries) {
	/* Default breakpoints that should apply to all observed elements that don't define their own custom breakpoints. */
	var $1em = parseFloat(getComputedStyle(document.body, null).fontSize);
	var defaultBreakpoints = {SM: 0, MD: $1em*18*2, LG: $1em*18*3, XL: $1em*18*4};
	
	entries.forEach(function(entry) {
	  /* If breakpoints are defined on the observed element, use them. Otherwise use the defaults. */
	  var breakpoints = entry.target.dataset.breakpoints ?
		  JSON.parse(entry.target.dataset.breakpoints) :
		  defaultBreakpoints;

	  /* Update the matching breakpoints on the observed element. */
	  Object.keys(breakpoints).forEach(function(breakpoint) {
		var minWidth = breakpoints[breakpoint];
		if (entry.contentRect.width >= minWidth) {
		  entry.target.classList.add(breakpoint);
		} else {
		  entry.target.classList.remove(breakpoint);
		}
	  });
	});
	let event = new Event('ResizeObserverCompleted');
	document.dispatchEvent(event);
  });

  /* Find all elements with the `data-observe-resizes` attribute and start observing them. */
  var elements = document.querySelectorAll('[data-observe-resizes]');
  for (var element, i = 0; element = elements[i]; i++) {
	ro.observe(element);
  }
}